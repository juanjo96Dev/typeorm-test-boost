name: üîÑ Auto release

permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    - cron: "0 0 */15 * *"
  workflow_dispatch:

env:
  NODE_VERSION: "18.20"

jobs:
  release:
    name: üöÄ Auto release
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3
      - name: üé´ Configure Git
        run: |
          USER_NAME=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" https://api.github.com/user | jq -r '.name')
          USER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" https://api.github.com/user | jq -r '.email')
          git config --global user.name "$USER_NAME"
          git config --global user.email "$USER_EMAIL"
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"
      - name: ‚öôÔ∏è Install dependencies
        run: yarn install --frozen-lockfile
      - name: üÜô Bump version and create a git tag
        run: |
          git checkout main
          git pull origin main
          git checkout -b release/${{ github.run_number }}
          EXISTS=$(git ls-remote --heads origin release/${{ github.run_number }} | wc -l)
          if [ $EXISTS -eq 1 ]; then
            git pull origin release/${{ github.run_number }}
          fi
          yarn release
          git push --follow-tags origin release/${{ github.run_number }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
      - name: ‚è±Ô∏è Wait for changes to be registered
        timeout-minutes: 5
        run: |
          while true; do
            git fetch origin
            DIFF=$(git diff main..release/${{ github.run_number }})
            echo "$DIFF"
            if [ "$DIFF" != "" ]; then
              break
            fi
            echo "Waiting for changes to be registered..."
            sleep 5s
          done
      - name: üè∑Ô∏è Get new tag
        id: get_new_tag
        run: |
          NEW_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          if [ -z "$NEW_TAG" ]; then
            echo "No new tag created, exiting"
            exit 1
          fi
          echo ::set-output name=newTag::$NEW_TAG
      - name: üìù Create pull request
        id: create_pr
        run: |
          PR_DATA=$(curl \
            -X POST \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{
              "title": "Bump version to ${{ steps.get_new_tag.outputs.newTag }}",
              "body": "Bumps version to ${{ steps.get_new_tag.outputs.newTag }}",
              "head": "release/${{ github.run_number }}",
              "base": "main"
            }')
          PR_NUMBER=$(echo "$PR_DATA" | jq '.number')

          curl \
          -X POST \
          -H "Authorization: token ${{ secrets.PAT }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels \
          -d '{
            "labels": ["auto-release"]
          }'

          echo ::set-output name=prNumber::$PR_NUMBER
      - name: üïµÔ∏è Check if PR is approved
        uses: actions/github-script@v5
        timeout-minutes: 5
        env:
          PULL_REQUEST_NUMBER: ${{ steps.create_pr.outputs.prNumber }}
        with:
          script: |
            const timeout = 5 * 60 * 1000; // 5 minutes
            const interval = 5 * 1000; // 5 seconds
            const startTime = Date.now();
            const prNumber = process.env.PULL_REQUEST_NUMBER;
            console.log('PR number:', prNumber);
            while (Date.now() - startTime < timeout) {
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              const approved = reviews.some(review => review.state === 'APPROVED');
              if (approved) {
                console.log(`PR #${prNumber} has been approved`);
                return;
              }
              await new Promise(resolve => setTimeout(resolve, interval));
            }
            throw new Error('PR approval timed out');
          github-token: ${{ secrets.PAT }}
      - name: üîÑ Set up auto merge when all checks have passed
        uses: pascalgn/automerge-action@v0.14.3
        env:
          GITHUB_TOKEN: "${{ secrets.PAT }}"
          MERGE_LABELS: "auto-release"
          MERGE_METHOD: "squash"
          MERGE_COMMIT_MESSAGE: "Automatic squash and merge. PR was approved and all checks passed."
          MERGE_FORKS: "false"
          MERGE_RETRIES: "6"
          MERGE_RETRY_SLEEP: "10000"
          UPDATE_LABELS: ""
      - name: üöß Run build
        run: yarn run build
      - name: üéâ Publish to npm
        run: yarn publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_AUTH_TOKEN}}
      - name: üì¶ Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_new_tag.outputs.newTag }}
          release_name: Release ${{ steps.get_new_tag.outputs.newTag }}
          draft: false
          prerelease: false
      - name: üßπ Cleanup on failure or cancellation
        if: ${{ failure() || cancelled() }}
        uses: actions/github-script@v5
        with:
          script: |
            const runNumber = ${{ github.run_number }};
            const newTag = '${{ steps.get_new_tag.outputs.newTag }}';
            const { owner, repo } = context.repo;
            // Delete branch
            try {
              if (await github.rest.git.getRef({ owner, repo, ref: `heads/release/${runNumber}` })) {
                await github.rest.git.deleteRef({ owner, repo, ref: `heads/release/${runNumber}` });
                console.log(`Deleted branch release/${runNumber}`);
              }
            } catch (error) {
              console.log(`Branch release/${runNumber} not found`);
            }
            // Delete tag
            try {
              if (await github.rest.git.getRef({ owner, repo, ref: `tags/${newTag}` })) {
                await github.rest.git.deleteRef({ owner, repo, ref: `tags/${newTag}` });
                console.log(`Deleted tag ${newTag}`);
              }
            } catch (error) {
              console.log(`Tag ${newTag} not found`);
            }
            // Delete release
            try {
              const { data: releases } = await github.rest.repos.listReleases({ owner, repo });
              const release = releases.find(r => r.tag_name === newTag);
              if (release) {
                await github.rest.repos.deleteRelease({ owner, repo, release_id: release.id });
                console.log(`Deleted release ${newTag}`);
              }
            } catch (error) {
              console.log(`Release ${newTag} not found`);
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}
