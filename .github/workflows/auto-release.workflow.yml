name: 🤖 Auto release

permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    - cron: "0 0 */15 * *"
  workflow_dispatch:

env:
  NODE_VERSION: "18.20"

jobs:
  release:
    name: 🚀 Auto release
    runs-on: ubuntu-latest
    steps:
      - name: 📚 checkout
        uses: actions/checkout@v3
      - name: 🟢 node
        uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"
      - name: ⚙️ Install dependencies
        run: yarn install --frozen-lockfile
      - name: 🍃 Create release branch
        run: |
          git checkout -b release/${{ github.run_number }}
          EXISTS=$(git ls-remote --heads origin release/${{ github.run_number }} | wc -l)
          if [ $EXISTS -eq 1 ]; then
            git pull origin release/${{ github.run_number }}
          fi
          git push origin release/${{ github.run_number }}
      - name: 🆙 Bump version and create a git tag
        id: bump_version
        uses: phips28/gh-action-bump-version@master
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          version-type: "patch"
          tag-prefix: "v"
          target-branch: "release/${{ github.run_number }}"
          commit-message: "CI: bumps version to {{version}} [skip ci]"
      - name: 🔀 Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.PAT }}
          base: main
          branch: release/${{ github.run_number }}
          title: "Bump version to v${{ steps.bump_version.outputs.newTag }}"
          body: "The version of the code has been bumped to **${{ steps.bump_version.outputs.newTag }}**"
          labels: "auto-release"
      - name: Get PR number
        id: get_pr_number
        uses: actions/github-script@v5
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: 'release/${{ github.run_number }}'
            });

            if (prs.length === 0) {
              throw new Error('No PR found');
            }

            console.log('PR number:', prs[0].number);

            return prs[0].number;
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: ⏱️ Wait for PR merged
        uses: actions/github-script@v5
        timeout-minutes: 5
        env:
          PULL_REQUEST_NUMBER: ${{ steps.get_pr_number.outputs.result }}
        with:
          script: |
            const timeout = 5 * 60 * 1000; // 5 minutes
            const interval = 30 * 1000; // 30 seconds
            const startTime = Date.now();
            const prNumber = process.env.PULL_REQUEST_NUMBER;
            console.log('PR number:', prNumber);
            while (Date.now() - startTime < timeout) {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              if (pr.state === 'closed' && pr.merged) {
                return;
              }
              await new Promise(resolve => setTimeout(resolve, interval));
            }
            throw new Error('PR approval timed out');
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: 📦 Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.newTag }}
          release_name: Release ${{ steps.bump_version.outputs.newTag }}
          draft: false
          prerelease: false
      - name: 🧹 Cleanup on failure
        if: ${{ failure() }}
        run: |
          git checkout main
          git branch -D release/${{ github.run_number }}
          git push origin --delete release/${{ github.run_number }}
          sleep 3
          git tag -d ${{ steps.bump_version.outputs.newTag }}
          git push origin :refs/tags/${{ steps.bump_version.outputs.newTag }}
